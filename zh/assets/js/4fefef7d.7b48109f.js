"use strict";(self.webpackChunkfluid_website_demo=self.webpackChunkfluid_website_demo||[]).push([[8704],{3548:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var n=a(7624),i=a(2172);const s={sidebar_label:"What is Fluid",sidebar_position:1,slug:"/"},o="What is Fluid",r={id:"core-concepts/what-is-fluid",title:"What is Fluid",description:"Fluid is an open source Kubernetes-native Distributed Dataset Orchestrator and Accelerator for data-intensive applications, such as big data and AI applications. It is hosted by the Cloud Native Computing Foundation (CNCF) as a sandbox project.",source:"@site/docs/core-concepts/what-is-fluid.md",sourceDirName:"core-concepts",slug:"/",permalink:"/zh/docs/",draft:!1,unlisted:!1,editUrl:"https://github.com/fluid-cloudnative/fluid-cloudnative.github.io/tree/master/docs/core-concepts/what-is-fluid.md",tags:[],version:"current",lastUpdatedBy:"RongGu",lastUpdatedAt:1712561250,formattedLastUpdatedAt:"2024\u5e744\u67088\u65e5",sidebarPosition:1,frontMatter:{sidebar_label:"What is Fluid",sidebar_position:1,slug:"/"},sidebar:"tutorialSidebar",next:{title:"Key Features",permalink:"/zh/docs/core-concepts/key-features"}},d={},c=[{value:"Target Scenario and  Values",id:"target-scenario-and--values",level:2},{value:"Why Cloud Native needs Fluid",id:"why-cloud-native-needs-fluid",level:2},{value:"Publication",id:"publication",level:2}];function l(e){const t={a:"a",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",strong:"strong",...(0,i.M)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"what-is-fluid",children:"What is Fluid"}),"\n",(0,n.jsxs)(t.p,{children:["Fluid is an open source Kubernetes-native Distributed Dataset Orchestrator and Accelerator for data-intensive applications, such as big data and AI applications. It is hosted by the ",(0,n.jsx)(t.a,{href:"https://cncf.io",children:"Cloud Native Computing Foundation"})," (CNCF) as a sandbox project."]}),"\n",(0,n.jsx)(t.h2,{id:"target-scenario-and--values",children:"Target Scenario and  Values"}),"\n",(0,n.jsx)(t.p,{children:"In the treand of computation and stroage separation, the goal of Fluid is to enable AI/Big Data Applications to use data from any storage more efficiently with a high-level abstraction manner  and without changes to the applications themselves."}),"\n",(0,n.jsx)(t.p,{children:"Through the data abstraction layer powered by Fluid on Kubernetes, the data will just be like\nthe fluid, waving across the storage sources(such as HDFS, OSS, Ceph) and the cloud native applications on Kubernetes. It can be moved, copied, evicted, transformed and managed flexibly. Besides, All the data operations are transparent to users. Users do not need to worry about the efficiency of remote data access nor the convenience of data source management. User only need to access the data abstracted from the Kubernetes native data volume, and all the left tasks and details are handled by Fluid."}),"\n",(0,n.jsx)(t.p,{children:"Fluid aims to turn different distributed cache systems(Alluxio, JuiceFS, Vineyard,  CubeFS and so on) into self-managing, self-scaling, self-healing and observable cache services inside of Kubernetes by providing the common framework of Fluid."}),"\n",(0,n.jsx)(t.p,{children:"Fluid enables Kubernetes schedulers to make intelligent, topology-aware scheduling plans regarding where the distributed data cache system is located.  It focuses on the dataset orchestration and application orchestration  scenarios. The dataset orchestration can arrange the cached dataset to the specific Kubernetes node, while the application orchestration can arrange the the applications to nodes with the pre-loaded datasets. These two can work together to form the co-orchestration scenario, which take both the dataset specifications and application characteristics into consideration during resouce scheduling."}),"\n",(0,n.jsx)(t.p,{children:"Fluid presents its value in the following two aspects:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"Use the power of Kubernetes platform to deliver its services via a Kubernetes Operator for each distributed cache provider, and automate the tasks of the administrator: deployment, bootstrapping, configuration, provisioning, scaling, upgrading, monitoring, data prefetch, data migration and resource management."}),"\n",(0,n.jsx)(t.li,{children:"Help the users make the most of distributed caching by combining third-party caching systems with Kubernetes scheduling and elasticity, also aligning them with specific application data usage scenarios and methods."}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"why-cloud-native-needs-fluid",children:"Why Cloud Native needs Fluid"}),"\n",(0,n.jsx)(t.p,{children:"There exist a nature divergence between the cloud native environment and the earlier big data processing framework. Deeply affected by Google's GFS, MapReduce, BigTable influential papers, the open souce big data ecosystem keeps the concept of 'moving data but not moving computation' during system design. Therefore, data-intensive computing frameworks, such as Spark, Hive, MapReduce, aim to reduce data transmission, and consider more data locality architecture during the design. However, as time changes, for both consider the flexibility of the resource scalability and usage cost, compution and storage separation architecture has been widely used in the cloud native environment. Thus, the cloud native ecosystem need an component like Fluid to make up the lost data locality when the big data architecture embraces cloud native architecture."}),"\n",(0,n.jsx)(t.p,{children:"Besides, in the cloud native environment, applications are usually deployed in the stateless micro-service style, but focus on data processing. However, the data-intensive frameworks and applications always focus on data abstraction, and schedules and executes the computing jobs and tasks. When data-intensive frameworks are deployed in cluod native environment, it needs component like Fluid to handle the data scheduling in cloud."}),"\n",(0,n.jsx)(t.p,{children:"To resolve the issue that Kubernetes lacks the awareness and optimization for application data, Fluid put forward a series of innovative methods such as co-orchestration, intelligent awareness, joint-optimization, to form an efficient supporting platform for data-intensive applications in cloud native environment."}),"\n",(0,n.jsx)(t.h2,{id:"publication",children:"Publication"}),"\n",(0,n.jsx)(t.p,{children:"For more information of our key ideas, please refer to our papers:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:(0,n.jsxs)(t.strong,{children:["Rong Gu, Kai Zhang, Zhihao Xu, et al. ",(0,n.jsx)(t.a,{href:"https://ieeexplore.ieee.org/abstract/document/9835158",children:"Fluid: Dataset Abstraction and Elastic Acceleration for Cloud-native Deep Learning Training Jobs"}),". IEEE ICDE, pp. 2183-2196, May, 2022. (Conference Version)"]})}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:(0,n.jsxs)(t.strong,{children:["Rong Gu, Zhihao Xu, Yang Che, et al. ",(0,n.jsx)(t.a,{href:"https://ieeexplore.ieee.org/document/10249214",children:"High-level Data Abstraction and Elastic Data Caching for Data-intensive AI Applications on Cloud-native Platforms"}),". IEEE TPDS, pp. 2946-2964, Vol 34(11), 2023. (Journal Version)"]})}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,i.M)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},2172:(e,t,a)=>{a.d(t,{I:()=>r,M:()=>o});var n=a(1504);const i={},s=n.createContext(i);function o(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);