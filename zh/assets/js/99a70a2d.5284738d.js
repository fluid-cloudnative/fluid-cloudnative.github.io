"use strict";(self.webpackChunkfluid_website_demo=self.webpackChunkfluid_website_demo||[]).push([[2084],{1756:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>u});var i=n(7624),o=n(2172);const s={sidebar_label:"How to Use Client other than Go Client",sidebar_position:2},l="How to Use Client other than Go Client",a={id:"developer-guide/client-usage/how-to-use-client-other-than-go-client",title:"How to Use Client other than Go Client",description:"Fluid using kube-openapi and swagger-codegen to support multiple clients, including Java and Python.",source:"@site/versioned_docs/version-v1.0.0/developer-guide/client-usage/how-to-use-client-other-than-go-client.md",sourceDirName:"developer-guide/client-usage",slug:"/developer-guide/client-usage/how-to-use-client-other-than-go-client",permalink:"/zh/docs/developer-guide/client-usage/how-to-use-client-other-than-go-client",draft:!1,unlisted:!1,editUrl:"https://github.com/fluid-cloudnative/fluid-cloudnative.github.io/tree/master/versioned_docs/version-v1.0.0/developer-guide/client-usage/how-to-use-client-other-than-go-client.md",tags:[],version:"v1.0.0",lastUpdatedBy:"chenqiming",lastUpdatedAt:1713345055,formattedLastUpdatedAt:"2024\u5e744\u670817\u65e5",sidebarPosition:2,frontMatter:{sidebar_label:"How to Use Client other than Go Client",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"How to Create and Delete Fluid Resources using Go Client",permalink:"/zh/docs/developer-guide/client-usage/how-to-create-and-delete-fluid-resources-using-go-client"},next:{title:"Access via REST",permalink:"/zh/docs/developer-guide/client-usage/access-via-REST"}},c={},u=[{value:"how to generate",id:"how-to-generate",level:3},{value:"How to Use",id:"how-to-use",level:3}];function r(e){const t={a:"a",code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",...(0,o.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"how-to-use-client-other-than-go-client",children:"How to Use Client other than Go Client"}),"\n",(0,i.jsx)(t.p,{children:"Fluid using kube-openapi and swagger-codegen to support multiple clients, including Java and Python."}),"\n",(0,i.jsxs)(t.p,{children:["Java Client: ",(0,i.jsx)(t.a,{href:"https://github.com/fluid-cloudnative/fluid-client-java",children:"https://github.com/fluid-cloudnative/fluid-client-java"})]}),"\n",(0,i.jsx)(t.h3,{id:"how-to-generate",children:"how to generate"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-shell",children:"$ cd $GOPATH/src/github.com/fluid-cloudnative\n$ hack/sdk/gen-sdk.sh\n"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"hack/sdk/gen-sdk.sh"})," script will generate Java and Python client in sdk folder. If you want to generate other client,\nYou can modify script by adding these code:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-shell",children:"java -jar ${SWAGGER_CODEGEN_JAR} generate -i ${SWAGGER_CODEGEN_FILE} -l <language> -o ${JAVA_SDK_OUTPUT_PATH} -c ${SWAGGER_CODEGEN_CONF} --model-package com.github.fluid-cloudnative.fluid\n"})}),"\n",(0,i.jsx)(t.h3,{id:"how-to-use",children:"How to Use"}),"\n",(0,i.jsxs)(t.p,{children:["It is suggested that you should use ApiClient and CustomObjectsApi from io.kubernetes",":client-java",".\nThe only thing you should import from fluid-cloudnative.fluid",":fluid-client-java"," is com.github.fluid_cloudnative.fluid.*"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'import io.kubernetes.client.openapi.ApiClient;\nimport io.kubernetes.client.openapi.apis.CustomObjectsApi;\n\nimport com.github.fluid_cloudnative.fluid.*;\n\npublic class MyExample {\n\n    // generate this client from a kubeconfig file or something else\n    ApiClient apiClient;\n\n    public void createAlluxioRuntime(String namespace, AlluxioRuntime runtime) throws ApiException {\n        CustomObjectsApi customObjectsApi = new CustomObjectsApi(apiClient);\n        customObjectsApi.createNamespacedCustomObject(\n                AlluxioRuntime.group,\n                AlluxioRuntime.version,\n                namespace,\n                AlluxioRuntime.plural,\n                runtime,\n                "true"\n        );\n    }\n\n    public AlluxioRuntime getAlluxioRuntime(String namespace, String name) throws Exception {\n        CustomObjectsApi customObjectsApi = new CustomObjectsApi(apiClient);\n        Object obj = customObjectsApi.getNamespacedCustomObject(\n                AlluxioRuntime.group,\n                AlluxioRuntime.version,\n                namespace,\n                AlluxioRuntime.plural,\n                name\n        );\n        Gson gson = new JSON().getGson();\n        return gson.fromJson(gson.toJsonTree(obj).getAsJsonObject(), AlluxioRuntime.class);\n    }\n\n    /*\n    Note that currently ClientJava can only support merge-patch+json\n    */\n    public void patchAlluxioRuntime(String namespace, String name, String patchBody) throws ApiException {\n        CustomObjectsApi customObjectsApi = new CustomObjectsApi(apiClient);\n        customObjectsApi.patchNamespacedCustomObject(\n                AlluxioRuntime.group,\n                AlluxioRuntime.version,\n                namespace,\n                AlluxioRuntime.plural,\n                name,\n                patchpatchBody.getBytes()ody\n        );\n    }\n}\n\n'})})]})}function d(e={}){const{wrapper:t}={...(0,o.M)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(r,{...e})}):r(e)}},2172:(e,t,n)=>{n.d(t,{I:()=>a,M:()=>l});var i=n(1504);const o={},s=i.createContext(o);function l(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);