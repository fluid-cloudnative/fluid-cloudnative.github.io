"use strict";(self.webpackChunkfluid_website_demo=self.webpackChunkfluid_website_demo||[]).push([[4136],{3296:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>o,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var s=i(7624),t=i(2172);const a={sidebar_label:"Accelerate PVC with Fluid",sidebar_position:2},r="Accelerate PVC with Fluid",l={id:"tutorials/storage-acceleration/accelerate-pvc-with-fluid",title:"Accelerate PVC with Fluid",description:"Scenario: training ResNet50",source:"@site/versioned_docs/version-v0.9/tutorials/storage-acceleration/accelerate-pvc-with-fluid.md",sourceDirName:"tutorials/storage-acceleration",slug:"/tutorials/storage-acceleration/accelerate-pvc-with-fluid",permalink:"/zh/docs/v0.9/tutorials/storage-acceleration/accelerate-pvc-with-fluid",draft:!1,unlisted:!1,editUrl:"https://github.com/fluid-cloudnative/fluid-cloudnative.github.io/tree/master/versioned_docs/version-v0.9/tutorials/storage-acceleration/accelerate-pvc-with-fluid.md",tags:[],version:"v0.9",lastUpdatedBy:"chenqiming",lastUpdatedAt:1714041983,formattedLastUpdatedAt:"2024\u5e744\u670825\u65e5",sidebarPosition:2,frontMatter:{sidebar_label:"Accelerate PVC with Fluid",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Accelerate HostPath with Fluid",permalink:"/zh/docs/v0.9/tutorials/storage-acceleration/accelerate-hostPath-with-fluid"},next:{title:"Accelerate Different Storage with Fluid",permalink:"/zh/docs/v0.9/tutorials/storage-acceleration/accelerate-different-storage-with-fluid"}},d={},c=[{value:"Scenario: training ResNet50",id:"scenario-training-resnet50",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Hardware Configuration",id:"hardware-configuration",level:3},{value:"Software Configuration",id:"software-configuration",level:3},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Data Preparation",id:"data-preparation",level:2},{value:"NFS dawnbench",id:"nfs-dawnbench",level:2},{value:"Deploy Dataset",id:"deploy-dataset",level:3},{value:"Dawnbench",id:"dawnbench",level:3},{value:"Single machine with eight GPUs",id:"single-machine-with-eight-gpus",level:4},{value:"Four machines with eight GPUs",id:"four-machines-with-eight-gpus",level:4},{value:"Accelerate PVC with Fluid",id:"accelerate-pvc-with-fluid-1",level:2},{value:"Deploy Dataset",id:"deploy-dataset-1",level:3},{value:"Dawnbench",id:"dawnbench-1",level:3},{value:"Single machine with eight GPUs",id:"single-machine-with-eight-gpus-1",level:4},{value:"Four machines with eight GPUs",id:"four-machines-with-eight-gpus-1",level:4},{value:"Experiment Results",id:"experiment-results",level:2},{value:"horovod-1x8",id:"horovod-1x8",level:3},{value:"horovod-4x8",id:"horovod-4x8",level:3},{value:"Analysis",id:"analysis",level:2}];function h(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.M)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"accelerate-pvc-with-fluid",children:"Accelerate PVC with Fluid"}),"\n",(0,s.jsx)(n.h2,{id:"scenario-training-resnet50",children:"Scenario: training ResNet50"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Device\uff1a V100 x8"}),"\n",(0,s.jsx)(n.li,{children:"NFS Server\uff1a38037492dc-pol25.cn-shanghai.nas.aliyuncs.com"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsx)(n.h3,{id:"hardware-configuration",children:"Hardware Configuration"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Cluster"}),(0,s.jsx)(n.th,{children:"Alibaba Cloud Kubernetes. v1.16.9-aliyun.1"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ECS Instance"}),(0,s.jsxs)(n.td,{children:["ECS   specifications\uff1aecs.gn6v-c10g1.20xlarge",(0,s.jsx)("br",{}),"    CPU\uff1a82 cores"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Distributed Storage"}),(0,s.jsx)(n.td,{children:"NAS"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"software-configuration",children:"Software Configuration"}),"\n",(0,s.jsx)(n.p,{children:"Software version: 0.18.1-tf1.14.0-torch1.2.0-mxnet1.5.0-py3.6"}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/fluid-cloudnative/fluid",children:"Fluid"})," (version >= 0.3.0)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/kubeflow/arena",children:"Arena"}),"\uff08version >= 0.4.0\uff09"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/horovod/horovod",children:"Horovod"})," (version=0.18.1)"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/tensorflow/benchmarks/tree/cnn_tf_v1.14_compatible",children:"Benchmark"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"data-preparation",children:"Data Preparation"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Download"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"$ wget http://imagenet-tar.oss-cn-shanghai.aliyuncs.com/imagenet.tar.gz\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Unpack"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"$ tar -I pigz -xvf imagenet.tar.gz\n"})}),"\n",(0,s.jsx)(n.h2,{id:"nfs-dawnbench",children:"NFS dawnbench"}),"\n",(0,s.jsx)(n.h3,{id:"deploy-dataset",children:"Deploy Dataset"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Export Dataset on Your NFS Server"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Create Volume using Kubernetes"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"$ cat <<EOF > nfs.yaml\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: nfs-imagenet\nspec:\n  capacity:\n    storage: 150Gi\n  volumeMode: Filesystem\n  accessModes:\n  - ReadOnlyMany\n  persistentVolumeReclaimPolicy: Retain\n  storageClassName: nfs\n  mountOptions:\n  - vers=3\n  - nolock\n  - proto=tcp\n  - rsize=1048576\n  - wsize=1048576\n  - hard\n  - timeo=600\n  - retrans=2\n  - noresvport\n  - nfsvers=4.1\n  nfs:\n    path: <YOUR_PATH_TO_DATASET>\n    server: <YOUR_NFS_SERVER>\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: nfs-imagenet\nspec:\n  accessModes:\n  - ReadOnlyMany\n  resources:\n    requests:\n      storage: 150Gi\n  storageClassName: nfs\nEOF\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"NOTE:"})}),"\n",(0,s.jsxs)(n.p,{children:["Please replace ",(0,s.jsx)(n.code,{children:"YOUR_PATH_TO_DATASET"})," and ",(0,s.jsx)(n.code,{children:"YOUR_NFS_SERVER"}),"\nwith your own nfs server address and path to dataset."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"$ kubectl create -f nfs.yaml\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"Check Volume"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"$ kubectl get pv,pvc\nNAME                            CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                  STORAGECLASS   REASON   AGE\npersistentvolume/nfs-imagenet   150Gi      ROX            Retain           Bound    default/nfs-imagenet   nfs                     45s\n\nNAME                                 STATUS   VOLUME         CAPACITY   ACCESS MODES   STORAGECLASS   AGE\npersistentvolumeclaim/nfs-imagenet   Bound    nfs-imagenet   150Gi      ROX            nfs            45s\n"})}),"\n",(0,s.jsx)(n.h3,{id:"dawnbench",children:"Dawnbench"}),"\n",(0,s.jsx)(n.h4,{id:"single-machine-with-eight-gpus",children:"Single machine with eight GPUs"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"arena submit mpi \\\n    --name horovod-resnet50-v2-1x8-nfs \\\n    --gpus=8 \\\n    --workers=1 \\\n    --working-dir=/horovod-demo/tensorflow-demo/ \\\n    --data nfs-imagenet:/data \\\n    -e DATA_DIR=/data/imagenet \\\n    -e num_batch=1000 \\\n    -e datasets_num_private_threads=8 \\\n    --image=registry.cn-hangzhou.aliyuncs.com/tensorflow-samples/horovod-benchmark-dawnbench-v2:0.18.1-tf1.14.0-torch1.2.0-mxnet1.5.0-py3.6 \\\n    ./launch-example.sh 1 8\n"})}),"\n",(0,s.jsx)(n.h4,{id:"four-machines-with-eight-gpus",children:"Four machines with eight GPUs"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"arena submit mpi \\\n    --name horovod-resnet50-v2-4x8-nfs \\\n    --gpus=8 \\\n    --workers=4 \\\n    --working-dir=/horovod-demo/tensorflow-demo/ \\\n    --data nfs-imagenet:/data \\\n    -e DATA_DIR=/data/imagenet \\\n    -e num_batch=1000 \\\n    -e datasets_num_private_threads=8 \\\n    --image=registry.cn-hangzhou.aliyuncs.com/tensorflow-samples/horovod-benchmark-dawnbench-v2:0.18.1-tf1.14.0-torch1.2.0-mxnet1.5.0-py3.6 \\\n    ./launch-example.sh 4 8\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"NOTE:"}),(0,s.jsx)(n.br,{}),"\n","If you find that nfs volume cannot be deleted,\nthis is because Arena will leave a launcher pod after training finished,\nand Kubernetes still thinks that volume is in using."]}),"\n",(0,s.jsx)(n.p,{children:"Just execute following command to force deleting volume:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'$ kubectl patch pvc nfs-imagenet  -p \'{"metadata":{"finalizers": []}}\' --type=merge\n'})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"accelerate-pvc-with-fluid-1",children:"Accelerate PVC with Fluid"}),"\n",(0,s.jsx)(n.h3,{id:"deploy-dataset-1",children:"Deploy Dataset"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Follow Previous Steps to Create NFS Volume"}),"\n",(0,s.jsx)(n.li,{children:"Deploy Fluid to Accelerate NFS Volume"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'$ cat <<EOF > dataset.yaml\napiVersion: data.fluid.io/v1alpha1\nkind: Dataset\nmetadata:\n  name: fluid-imagenet\nspec:\n  mounts:\n  - mountPoint: pvc://nfs-imagenet\n    name: nfs-imagenet\n  nodeAffinity:\n    required:\n      nodeSelectorTerms:\n        - matchExpressions:\n            - key: aliyun.accelerator/nvidia_name\n              operator: In\n              values:\n                - Tesla-V100-SXM2-16GB\n---\napiVersion: data.fluid.io/v1alpha1\nkind: AlluxioRuntime\nmetadata:\n  name: fluid-imagenet\nspec:\n  replicas: 4\n  data:\n    replicas: 1\n  tieredstore:\n    levels:\n      - mediumtype: SSD\n        path: /var/lib/docker/alluxio\n        quota: 150Gi\n        high: "0.99"\n        low: "0.8"\nEOF\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"NOTE:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Please keep ",(0,s.jsx)(n.code,{children:"spec.replicas"})," consistent with the number of machines you are going to use for machine learning\u3002"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"nodeSelectorTerms"})," is used to restrict scheduling on machines with V100 GPU only."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"$ kubectl create -f dataset.yaml\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"Check Volume"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"$ kubectl get pv,pvc\nNAME                              CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                    STORAGECLASS   REASON   AGE\npersistentvolume/fluid-imagenet   100Gi      RWX            Retain           Bound    default/fluid-imagenet                           1s\npersistentvolume/nfs-imagenet     150Gi      ROX            Retain           Bound    default/nfs-imagenet     nfs                     16m\n\nNAME                                   STATUS   VOLUME           CAPACITY   ACCESS MODES   STORAGECLASS   AGE\npersistentvolumeclaim/fluid-imagenet   Bound    fluid-imagenet   100Gi      RWX                           0s\npersistentvolumeclaim/nfs-imagenet     Bound    nfs-imagenet     150Gi      ROX            nfs            16m\n"})}),"\n",(0,s.jsx)(n.h3,{id:"dawnbench-1",children:"Dawnbench"}),"\n",(0,s.jsx)(n.h4,{id:"single-machine-with-eight-gpus-1",children:"Single machine with eight GPUs"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"arena submit mpi \\\n    --name horovod-resnet50-v2-1x8-fluid \\\n    --gpus=8 \\\n    --workers=1 \\\n    --working-dir=/horovod-demo/tensorflow-demo/ \\\n    --data fluid-imagenet:/data \\\n    -e DATA_DIR=/data/nfs-imagenet/imagenet \\\n    -e num_batch=1000 \\\n    -e datasets_num_private_threads=8 \\\n    --image=registry.cn-hangzhou.aliyuncs.com/tensorflow-samples/horovod-benchmark-dawnbench-v2:0.18.1-tf1.14.0-torch1.2.0-mxnet1.5.0-py3.6 \\\n    ./launch-example.sh 1 8\n"})}),"\n",(0,s.jsx)(n.h4,{id:"four-machines-with-eight-gpus-1",children:"Four machines with eight GPUs"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"arena submit mpi \\\n    --name horovod-resnet50-v2-4x8-fluid \\\n    --gpus=8 \\\n    --workers=4 \\\n    --working-dir=/horovod-demo/tensorflow-demo/ \\\n    --data fluid-imagenet:/data \\\n    -e DATA_DIR=/data/nfs-imagenet/imagenet \\\n    -e num_batch=1000 \\\n    -e datasets_num_private_threads=8 \\\n    --image=registry.cn-hangzhou.aliyuncs.com/tensorflow-samples/horovod-benchmark-dawnbench-v2:0.18.1-tf1.14.0-torch1.2.0-mxnet1.5.0-py3.6 \\\n    ./launch-example.sh 4 8\n"})}),"\n",(0,s.jsx)(n.h2,{id:"experiment-results",children:"Experiment Results"}),"\n",(0,s.jsx)(n.h3,{id:"horovod-1x8",children:"horovod-1x8"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{}),(0,s.jsx)(n.th,{children:"nfs"}),(0,s.jsx)(n.th,{children:"fluid (cold)"}),(0,s.jsx)(n.th,{children:"fluid (warm)"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Training time"}),(0,s.jsx)(n.td,{children:"3h49m10s"}),(0,s.jsx)(n.td,{children:"3h50m40s"}),(0,s.jsx)(n.td,{children:"3h34m15s"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Speed at the 1000 step(images/second)"}),(0,s.jsx)(n.td,{children:"2400.8"}),(0,s.jsx)(n.td,{children:"2378.4"}),(0,s.jsx)(n.td,{children:"9327.6"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Speed at the last step(images/second)"}),(0,s.jsx)(n.td,{children:"8696.8"}),(0,s.jsx)(n.td,{children:"8692.8"}),(0,s.jsx)(n.td,{children:"9301.6"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"steps"}),(0,s.jsx)(n.td,{children:"56300"}),(0,s.jsx)(n.td,{children:"56300"}),(0,s.jsx)(n.td,{children:"56300"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Accuracy @ 5"}),(0,s.jsx)(n.td,{children:"0.9282"}),(0,s.jsx)(n.td,{children:"0.9286"}),(0,s.jsx)(n.td,{children:"0.9285"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"horovod-4x8",children:"horovod-4x8"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{}),(0,s.jsx)(n.th,{children:"nfs"}),(0,s.jsx)(n.th,{children:"fluid (cold)"}),(0,s.jsx)(n.th,{children:"fluid (warm)"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Training time"}),(0,s.jsx)(n.td,{children:"2h15m59s"}),(0,s.jsx)(n.td,{children:"1h43m43s"}),(0,s.jsx)(n.td,{children:"1h32m22s"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Speed at the 1000 step(images/second)"}),(0,s.jsx)(n.td,{children:"3136"}),(0,s.jsx)(n.td,{children:"8889.6"}),(0,s.jsx)(n.td,{children:"20859.5"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Speed at the last step(images/second)"}),(0,s.jsx)(n.td,{children:"15024"}),(0,s.jsx)(n.td,{children:"20506.3"}),(0,s.jsx)(n.td,{children:"21329"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"steps"}),(0,s.jsx)(n.td,{children:"14070"}),(0,s.jsx)(n.td,{children:"14070"}),(0,s.jsx)(n.td,{children:"14070"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Accuracy @ 5"}),(0,s.jsx)(n.td,{children:"0.9228"}),(0,s.jsx)(n.td,{children:"0.9204"}),(0,s.jsx)(n.td,{children:"0.9243"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"analysis",children:"Analysis"}),"\n",(0,s.jsx)(n.p,{children:"From the test results, the Fluid acceleration effect on 1x8 has no obvious effect,\nbut in the scenario of 4x8, the effect is very obvious.\nIn warm data scenario, the training time can be shortened (135-92)/135 = 31%;\nIn cold data scenario, training time can be shortened (135-103) /135 = 23%.\nThis is because NFS bandwidth became a bottleneck under 4x8;\nFluid based on Alluxio provides distributed cache data reading capability for P2P data."})]})}function o(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},2172:(e,n,i)=>{i.d(n,{I:()=>l,M:()=>r});var s=i(1504);const t={},a=s.createContext(t);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);