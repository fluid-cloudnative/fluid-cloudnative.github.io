"use strict";(self.webpackChunkfluid_website_demo=self.webpackChunkfluid_website_demo||[]).push([[9704],{7076:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var i=n(7624),s=n(2172);const a={sidebar_label:"Architecture and Concepts",sidebar_position:3},c="Architecture and Concepts",o={id:"core-concepts/architecture-and-concepts",title:"Architecture and Concepts",description:"Architecture",source:"@site/docs/core-concepts/architecture-and-concepts.md",sourceDirName:"core-concepts",slug:"/core-concepts/architecture-and-concepts",permalink:"/docs/core-concepts/architecture-and-concepts",draft:!1,unlisted:!1,editUrl:"https://github.com/fluid-cloudnative/fluid-cloudnative.github.io/tree/master/docs/core-concepts/architecture-and-concepts.md",tags:[],version:"current",lastUpdatedBy:"chenqiming",lastUpdatedAt:1712571590,formattedLastUpdatedAt:"Apr 8, 2024",sidebarPosition:3,frontMatter:{sidebar_label:"Architecture and Concepts",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Key Features",permalink:"/docs/core-concepts/key-features"},next:{title:"Quick Start",permalink:"/docs/get-started/quick-start"}},r={},l=[{value:"Architecture",id:"architecture",level:2},{value:"Key Concepts",id:"key-concepts",level:2}];function d(e){const t={h1:"h1",h2:"h2",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"architecture-and-concepts",children:"Architecture and Concepts"}),"\n",(0,i.jsx)(t.h2,{id:"architecture",children:"Architecture"}),"\n",(0,i.jsx)(t.p,{children:"Fluid is built in the Kubernetes native fashion. It lies between existing underlying cloud native storage systems and the upper layer data-intensive applications. The architecture of Fluid in Kubernetes is as following:"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.img,{src:n(9668).c+"",width:"1084",height:"942"}),"\nSpecifically, Fluid is logically split into a data plane and a control plane."]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["The control plane is composed of ",(0,i.jsx)(t.strong,{children:"Dataset/Runtime Controller"})," and ",(0,i.jsx)(t.strong,{children:"Application Manager"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Dataset/Runtime Controller:"})," It manages the datasets and also automates the data operations of the dataset, like data load, data migrate, data process and so on."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Application Manager"}),": It is responsible for scheduling the workload pods according to cache location and managing their life cycles."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["The data plane is composed of Runtime Plugin and CSI Plugin:","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Runtime Plugin"}),": As a highly extensible plugin, it can help turn various data cache engines into self-managing, self-scaling, self-healing and observable cache services inside of Kubernetes by providing the common framework of Fluid."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Data Access Plugin"}),": It is responsible for managing different kinds of storage clients in container mode in the same manner. It supports both CSI Plugin and sidecar mode to run FUSE containers."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"The following diagram shows the different components."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:n(8472).c+"",width:"2346",height:"1150"})}),"\n",(0,i.jsx)(t.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,i.jsx)(t.p,{children:"For achieving its goals, Fluid provides some core concepts."}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Dataset"}),": A Dataset is a set of data logically related that can be used by computing engines, such as Spark for big data analytics and TensorFlow for AI applications."]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Same as native Kubernetes API definitions, including CRDs"}),"\n",(0,i.jsx)(t.li,{children:"Users describe the data\u2019s source, type, access mode and cache location"}),"\n",(0,i.jsx)(t.li,{children:"Users can use observability to make scaling decisions of distributed cache"}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Runtime"}),": The Runtime enforces dataset isolation/share, provides version management, and enables data acceleration by defining a set of interfaces to handle DataSets throughout their lifecycle, allowing for the implementation of management and acceleration functionalities behind these interfaces. Fluid has two kind of Runtime: CacheRuntime and ThinRuntime."]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"CacheRuntime, which implements distributed caching solutions including Alluxio, JuiceFS, Vineyard and others"}),"\n",(0,i.jsx)(t.li,{children:"ThinRuntime, that provides a unified access interface to systems like CubeFS, GlusterFS, NFS and others."}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Data Operations"}),": Unlike traditional PVC-based storage abstraction, Fluid takes an Application-oriented perspective to abstract the \u201cprocess of manipulating data on Kubernetes\u201d. It introduces the concept of elastic Dataset and implements it as a first-class citizen in Kubernetes to enable Dataset CRUD operation, permission control, and data access acceleration. Besides the basic operations like creation, Fluid also provides a set of operations for the defined  Dataset for users to manipulate the data flow."]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Data Load prefetches data from dataset source to cache system."}),"\n",(0,i.jsx)(t.li,{children:"Data Migration syncs data between external storages and dataset ."}),"\n",(0,i.jsx)(t.li,{children:"Data Process can be used to transform, split, applying dimensionality reduction to data\nDistributed cache scale up and down."}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,s.M)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},9668:(e,t,n)=>{n.d(t,{c:()=>i});const i=n.p+"assets/images/architecture-652f866829ce6d574f26cc930ff216c3.png"},8472:(e,t,n)=>{n.d(t,{c:()=>i});const i=n.p+"assets/images/components-06ede5256ffba9ebccdbd338b7dc8a60.png"},2172:(e,t,n)=>{n.d(t,{I:()=>o,M:()=>c});var i=n(1504);const s={},a=i.createContext(s);function c(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);